package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.example.demo.models.Address;
import com.example.demo.models.Blogs;
import com.example.demo.models.User;
import com.example.demo.services.UserService;
import com.example.demo.wrapperClass.WrapperClass;

import jakarta.validation.Valid;

@RestController()
@RequestMapping("/user")

public class UserController {

	@Autowired
	UserService userService;

	@Autowired
	WrapperClass wrapperClass;

	@GetMapping("/")
	public ResponseEntity getAllUsers() {
		wrapperClass.setMsg("All Users Displayed");
		wrapperClass.setData(this.userService.getAll());
		return new ResponseEntity<>(wrapperClass, HttpStatus.FOUND);
	}

	@PostMapping("/")
	public ResponseEntity createUsers(@RequestBody @Valid User user) {

		this.userService.create(user);
		wrapperClass.setMsg("Users created successfully");
		wrapperClass.setData(this.userService.create(user));
		return new ResponseEntity<>(wrapperClass, HttpStatus.CREATED);
	}

	@GetMapping("/{id}")
	public ResponseEntity getUserId(@PathVariable int id) {
//		User user = this.userService.getUserById(id);
		wrapperClass.setMsg("User with specified Id " + id + " Found");
		wrapperClass.setData(this.userService.getUserById(id));
		return new ResponseEntity<>(wrapperClass, HttpStatus.ACCEPTED);

	}
	
	@GetMapping("name/{name}")
	public ResponseEntity getUserName(@PathVariable String name) {

		wrapperClass.setMsg("User with specified Name " + name + " Found");
		wrapperClass.setData(this.userService.getUserByName(name));
		return new ResponseEntity<>(wrapperClass, HttpStatus.OK);

	}
	
	@GetMapping("/search")
	public ResponseEntity getUserByNameLike(@RequestParam String name) {

		wrapperClass.setMsg("User with specified Name " + name + " Found");
		wrapperClass.setData(this.userService.getUserByNameLike(name));
		return new ResponseEntity<>(wrapperClass, HttpStatus.OK);

	}

	@DeleteMapping("/{id}")
	public ResponseEntity deleteUser(@PathVariable int id) {
		wrapperClass.setMsg("User with specified Id " + id + " Deleted Successfully");
		wrapperClass.setData(this.userService.deleteUser(id));

		return new ResponseEntity(wrapperClass, HttpStatus.ACCEPTED);
	}

	@PutMapping("/{id}")
	public ResponseEntity updateUser(@PathVariable int id, @RequestBody User user) {
		wrapperClass.setMsg("User with specified Id " + id + " Updated Successfully");
		wrapperClass.setData(this.userService.editUser(id, user));

		return new ResponseEntity<>(wrapperClass, HttpStatus.ALREADY_REPORTED);

	}
	
	@PostMapping("/{id}/address")
	public ResponseEntity addAddress(@PathVariable Integer id, @RequestBody Address address) {
		wrapperClass.setMsg("Address added Successfully");
		wrapperClass.setData(this.userService.addAddress(id, address));
		
		return new ResponseEntity<>(wrapperClass, HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/{id}/address")
	public ResponseEntity getAddressById(@PathVariable Integer id) {
		wrapperClass.setMsg("User id with Address");
		wrapperClass.setData(this.userService.getAddressById(id));
		
		return new ResponseEntity<>(wrapperClass, HttpStatus.ACCEPTED);
	}
	
	@PostMapping("/{id}/blogs")
	public ResponseEntity getBlogsById(@PathVariable Integer id, @RequestBody Blogs blogs){
		wrapperClass.setMsg("Blog generated by User with id "+id);
		wrapperClass.setData(this.userService.addBlogs(id,blogs));
		
		return new ResponseEntity<>(wrapperClass, HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/{id}/blogs")
	public ResponseEntity getBlogsById(@PathVariable Integer id) {
		wrapperClass.setMsg("Blog of user id "+id);
		wrapperClass.setData(this.userService.getBlogs(id));
		
		return new ResponseEntity<>(wrapperClass, HttpStatus.ACCEPTED);
	}
	
	
}
